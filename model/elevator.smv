-- author: Hendrik Werner s4549775
-- NuSMV model of an elevator.

MODULE Button(door)
	VAR
		pressed: boolean;
		active: boolean;
	ASSIGN
		init(pressed) := FALSE;
		init(active) := FALSE;
		next(pressed) := {TRUE, FALSE};
		next(active) := door.open ? FALSE : active | pressed;

MODULE Light(button)
	VAR
		active: boolean;
	ASSIGN
		init(active) := FALSE;
	INVAR button.active <-> active

MODULE Door()
	VAR
		open: boolean;
	ASSIGN
		init(open) := FALSE;

MODULE Elevator(button0, button1, button2, button3)
	VAR
		floor: 0..3;
	ASSIGN
		init(floor) := 3;
		next(floor) := case
			button0.active |
			button1.active |
			button2.active |
			button3.active: (floor + 1) mod 4;
			TRUE: floor;
		esac;

MODULE DoorController(
		elevator,
		door0, button0,
		door1, button1,
		door2, button2,
		door3, button3
	)
	INVAR door0.open <-> elevator.floor = 0 & button0.active;
	INVAR door1.open <-> elevator.floor = 1 & button1.active;
	INVAR door2.open <-> elevator.floor = 2 & button2.active;
	INVAR door3.open <-> elevator.floor = 3 & button3.active;


MODULE main
	VAR
		door0: Door();
		door1: Door();
		door2: Door();
		door3: Door();
		button0: Button(door0);
		button1: Button(door1);
		button2: Button(door2);
		button3: Button(door3);
		elevator: Elevator(button0, button1, button2, button3);
		doorController: DoorController(
			elevator,
			door0, button0,
			door1, button1,
			door2, button2,
			door3, button3
		);
		light0: Light(button0);
		light1: Light(button1);
		light2: Light(button2);
		light3: Light(button3);

	-- Every floor can be visited at all times
	CTLSPEC AG EF elevator.floor = 0
	CTLSPEC AG EF elevator.floor = 1
	CTLSPEC AG EF elevator.floor = 2
	CTLSPEC AG EF elevator.floor = 3

	-- Lights are correct (specification 6)
	LTLSPEC G (light0.active -> F door0.open)
	LTLSPEC G (light1.active -> F door1.open)
	LTLSPEC G (light2.active -> F door2.open)
	LTLSPEC G (light3.active -> F door3.open)

	-- Lights are on iff the corresponding button is pressed
	LTLSPEC G (button0.active <-> light0.active)
	LTLSPEC G (button1.active <-> light1.active)
	LTLSPEC G (button2.active <-> light2.active)
	LTLSPEC G (button3.active <-> light3.active)
	CTLSPEC AG (button0.active <-> light0.active)
	CTLSPEC AG (button1.active <-> light1.active)
	CTLSPEC AG (button2.active <-> light2.active)
	CTLSPEC AG (button3.active <-> light3.active)

	-- Once a button is activated the button stays activated until the floor was
	-- served by the elevator (specification 2).
	LTLSPEC G (button0.active -> button0.active U door0.open)
	LTLSPEC G (button1.active -> button1.active U door1.open)
	LTLSPEC G (button2.active -> button2.active U door2.open)
	LTLSPEC G (button3.active -> button3.active U door3.open)

	-- Doors only open when the elevator is on their floor (specification 1)
	LTLSPEC G (door0.open -> elevator.floor = 0)
	LTLSPEC G (door1.open -> elevator.floor = 1)
	LTLSPEC G (door2.open -> elevator.floor = 2)
	LTLSPEC G (door3.open -> elevator.floor = 3)
	CTLSPEC AG (door0.open -> elevator.floor = 0)
	CTLSPEC AG (door1.open -> elevator.floor = 1)
	CTLSPEC AG (door2.open -> elevator.floor = 2)
	CTLSPEC AG (door3.open -> elevator.floor = 3)
